{
  "_args": [
    [
      {
        "raw": "node-dir@github:ackerapple/node-dir",
        "scope": null,
        "escapedName": "node-dir",
        "name": "node-dir",
        "rawSpec": "github:ackerapple/node-dir",
        "spec": "github:ackerapple/node-dir",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:ackerapple/node-dir.git",
          "sshUrl": "git+ssh://git@github.com/ackerapple/node-dir.git",
          "httpsUrl": "git+https://github.com/ackerapple/node-dir.git",
          "gitUrl": "git://github.com/ackerapple/node-dir.git",
          "shortcut": "github:ackerapple/node-dir",
          "directUrl": "https://raw.githubusercontent.com/ackerapple/node-dir/master/package.json"
        }
      },
      "C:\\Users\\Sailaja\\Documents\\personal_git\\Facility_Ang2\\facility-info\\node_modules\\ack-path"
    ]
  ],
  "_from": "ackerapple/node-dir",
  "_id": "node-dir@0.1.19",
  "_inCache": true,
  "_location": "/node-dir",
  "_phantomChildren": {},
  "_requested": {
    "raw": "node-dir@github:ackerapple/node-dir",
    "scope": null,
    "escapedName": "node-dir",
    "name": "node-dir",
    "rawSpec": "github:ackerapple/node-dir",
    "spec": "github:ackerapple/node-dir",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:ackerapple/node-dir.git",
      "sshUrl": "git+ssh://git@github.com/ackerapple/node-dir.git",
      "httpsUrl": "git+https://github.com/ackerapple/node-dir.git",
      "gitUrl": "git://github.com/ackerapple/node-dir.git",
      "shortcut": "github:ackerapple/node-dir",
      "directUrl": "https://raw.githubusercontent.com/ackerapple/node-dir/master/package.json"
    }
  },
  "_requiredBy": [
    "/ack-path"
  ],
  "_resolved": "git://github.com/ackerapple/node-dir.git#44a6c6824fdbbd1c5d05b17df6d18bf80e6b7712",
  "_shasum": "0454c52ae3ddc71f89c8744cbd2c0d64759f9f6a",
  "_shrinkwrap": null,
  "_spec": "node-dir@github:ackerapple/node-dir",
  "_where": "C:\\Users\\Sailaja\\Documents\\personal_git\\Facility_Ang2\\facility-info\\node_modules\\ack-path",
  "author": {
    "name": "Nathan Cartwright",
    "email": "fshost@yahoo.com",
    "url": "https://github.com/fshost"
  },
  "bugs": {
    "url": "https://github.com/fshost/node-dir/issues"
  },
  "dependencies": {
    "minimatch": "^3.0.2"
  },
  "description": "asynchronous file and directory operations for Node.js",
  "devDependencies": {
    "mocha": "~1.13.0",
    "should": "~2.0.2"
  },
  "directories": {
    "lib": "lib"
  },
  "engines": {
    "node": ">= 0.10.5"
  },
  "gitHead": "44a6c6824fdbbd1c5d05b17df6d18bf80e6b7712",
  "homepage": "https://github.com/fshost",
  "keywords": [
    "node-dir",
    "directory",
    "dir",
    "subdir",
    "file",
    "asynchronous",
    "Node.js",
    "fs"
  ],
  "license": "MIT",
  "main": "index",
  "name": "node-dir",
  "optionalDependencies": {},
  "readme": "[![Build Status](https://secure.travis-ci.org/fshost/node-dir.svg)](http://travis-ci.org/fshost/node-dir)\r\n\r\n# node-dir\r\nA lightweight Node.js module with methods for some common directory and file operations, including asynchronous, non-blocking methods for recursively getting an array of files, subdirectories, or both, and methods for recursively, sequentially reading and processing the contents of files in a directory and its subdirectories, with several options available for added flexibility if needed.\r\n\r\n### Table of Contents\r\n\r\n- [installation](#installation)\r\n- [usage](#usage)\r\n    - [methods](#methods)\r\n    - [readFiles](#readfiles)\r\n    - [readFilesStream](#readfilesstream)\r\n        - [readFilesStream examples](#readfilesstream-examples)\r\n    - [files async](#files-async)\r\n    - [files sync](#files-sync)\r\n    - [promiseFiles](#promisefiles)\r\n    - [subdirs](#subdirs)\r\n    - [paths](#paths)\r\n- [API Docs](#api-docs)\r\n    - [files](#files-api)\r\n    - [promiseFiles](#promisefiles-api)\r\n- [License](#license)\r\n\r\n#### installation\r\n\r\n    npm install node-dir\r\n\r\n### usage\r\n\r\n#### methods\r\nFor the sake of brevity, assume that the following line of code precedes all of the examples.\r\n\r\n```javascript\r\nvar dir = require('node-dir');\r\n```\r\n\r\n#### readFiles\r\nA variation on the method readFilesStream. See usage for [readFilesStream](#readFilesStream)\r\n```javascript\r\nreadFiles( dir, [options], fileCallback, [finishedCallback] )\r\n```\r\n\r\n#### readFilesStream\r\nSequentially read the content of each file in a directory, passing the contents to a callback, optionally calling a finished callback when complete.  The options and finishedCallback arguments are not required.\r\n\r\n```javascript\r\nreadFilesStream( dir, [options], streamCallback, [finishedCallback] )\r\n```\r\n\r\nValid options are:\r\n- encoding: file encoding (defaults to 'utf8')\r\n- exclude: a regex pattern or array to specify filenames to ignore\r\n- excludeDir: a regex pattern or array to specify directories to ignore\r\n- match: a regex pattern or array to specify filenames to operate on\r\n- matchDir: a regex pattern or array to specify directories to recurse \r\n- recursive: whether to recurse subdirectories when reading files (defaults to true)\r\n- reverse: sort files in each directory in descending order\r\n- shortName: whether to aggregate only the base filename rather than the full filepath\r\n- sort: sort files in each directory in ascending order (defaults to true)\r\n- doneOnErr: control if done function called on error (defaults to true)\r\n\r\nA reverse sort can also be achieved by setting the sort option to 'reverse', 'desc', or 'descending' string value.\r\n\r\n#### readFilesStream examples\r\n\r\nDisplay contents of files in this script's directory\r\n```javascript\r\ndir.readFiles(__dirname,\r\n    function(err, content, next) {\r\n        if (err) throw err;\r\n        console.log('content:', content);\r\n        next();\r\n    },\r\n    function(err, files){\r\n        if (err) throw err;\r\n        console.log('finished reading files:', files);\r\n    }\r\n);\r\n```\r\n\r\nDisplay contents of huge files in this script's directory\r\n```javascript\r\ndir.readFilesStream(__dirname,\r\n    function(err, stream, next) {\r\n        if (err) throw err;\r\n        var content = '';\r\n        stream.on('data',function(buffer) {\r\n            content += buffer.toString();\r\n        });\r\n        stream.on('end',function() {\r\n            console.log('content:', content);\r\n            next();\r\n        });\r\n    },\r\n    function(err, files){\r\n        if (err) throw err;\r\n        console.log('finished reading files:', files);\r\n    }\r\n);\r\n```\r\n\r\nMatch only filenames with a .txt extension and that don't start with a `.Â´\r\n```javascript\r\ndir.readFiles(__dirname, {\r\n    match: /.txt$/,\r\n    exclude: /^\\./\r\n    }, function(err, content, next) {\r\n        if (err) throw err;\r\n        console.log('content:', content);\r\n        next();\r\n    },\r\n    function(err, files){\r\n        if (err) throw err;\r\n        console.log('finished reading files:',files);\r\n    }\r\n);\r\n```\r\n\r\nExclude an array of subdirectory names\r\n```javascript\r\ndir.readFiles(__dirname, {\r\n    excludeDir: ['node_modules', 'test']\r\n    }, function(err, content, next) {\r\n        if (err) throw err;\r\n        console.log('content:', content);\r\n        next();\r\n    },\r\n    function(err, files){\r\n        if (err) throw err;\r\n        console.log('finished reading files:',files);\r\n    }\r\n);\r\n```\r\n\r\nThe callback for each file can optionally have a filename argument as its 3rd parameter and the finishedCallback argument is optional, e.g.\r\n```javascript\r\ndir.readFiles(__dirname, function(err, content, filename, next) {\r\n    console.log('processing content of file', filename);\r\n    next();\r\n});\r\n```\r\n\r\n        \r\n#### files async\r\nAsynchronously iterate the files of a directory and its subdirectories and pass an array of file paths to a callback.\r\n    \r\n```javascript\r\ndir.files(__dirname, function(err, files) {\r\n    if (err) throw err;\r\n    console.log(files);\r\n});\r\n```\r\n        \r\n#### files sync\r\nSynchronously iterate the files of a directory and its subdirectories and pass an array of file paths to a callback.\r\n\r\nIn this example, a console log of items by relative path will be made\r\n```javascript\r\nvar files = dir.files(__dirname, {sync:true, shortName:'relative', excludeHidden:true});\r\nconsole.log(files);\r\n```\r\n\r\n#### promiseFiles\r\nAsynchronously iterate the files of a directory and its subdirectories and pass an array of file paths to a callback.\r\n\r\n```javascript\r\npromiseFiles(path, readType||options, options)\r\n```\r\n\r\npromiseFiles example\r\n```javascript\r\ndir.promiseFiles(__dirname)\r\n.then((files)=>{\r\n    console.log(files);\r\n})\r\n.catch(e=>console.error(e))\r\n```\r\n\r\nNote that for the files and subdirs the object returned is an array, and thus all of the standard array methods are available for use in your callback for operations like filters or sorting. Some quick examples:\r\n\r\n```javascript\r\ndir.files(__dirname, function(err, files) {\r\n    if (err) throw err;\r\n    \r\n    // sort ascending\r\n    files.sort();\r\n    \r\n    // sort descending\r\n    files.reverse();\r\n    \r\n    // include only certain filenames\r\n    files = files.filter(function (file) {\r\n       return ['allowed', 'file', 'names'].indexOf(file) > -1;\r\n    });\r\n    \r\n    // exclude some filenames\r\n    files = files.filter(function (file) {\r\n        return ['exclude', 'these', 'files'].indexOf(file) === -1;\r\n    });\r\n});\r\n```\r\n\r\nAlso note that if you need to work with the contents of the files asynchronously, please use the readFiles method.  The files and subdirs methods are for getting a list of the files or subdirs in a directory as an array.\r\n        \r\n#### subdirs\r\nAsynchronously iterate the subdirectories of a directory and its subdirectories and pass an array of directory paths to a callback.\r\n\r\n```javascript\r\nsubdirs( dir, callback )\r\n```\r\n\r\nExample\r\n```javascript\r\ndir.subdirs(__dirname, function(err, subdirs) {\r\n    if (err) throw err;\r\n    console.log(subdirs);\r\n});\r\n```\r\n\r\n#### paths\r\nAsynchronously iterate the subdirectories of a directory and its subdirectories and pass an array of both file and directory paths to a callback.\r\n\r\n```javascript\r\npaths(dir, [combine], callback )\r\n```\r\n\r\nExample: Separated into two distinct arrays (paths.files and paths.dirs)\r\n```javascript\r\ndir.paths(__dirname, function(err, paths) {\r\n    if (err) throw err;\r\n    console.log('files:\\n',paths.files);\r\n    console.log('subdirs:\\n', paths.dirs);\r\n});\r\n```\r\n\r\n\r\nCombined in a single array (convenience method for concatenation of the above)\r\n\r\n```javascript\r\ndir.paths(__dirname, true, function(err, paths) {\r\n    if (err) throw err;\r\n    console.log('paths:\\n',paths);\r\n});\r\n```\r\n\r\n## API Docs\r\n\r\n### files API\r\n\r\n```javascript\r\nfiles(dir, type, callback, options)\r\n```\r\n\r\n- **dir** - directory path to read\r\n- **type**='file'\r\n    - 'file' returns only file listings\r\n    - 'dir' returns only directory listings\r\n    - 'all' returns {dirs:[], files:[]}\r\n    - 'combine' returns []\r\n- **callback** - \r\n- **options**\r\n    - **sync**=false - results are returned inline and no callbacks are used\r\n    - **shortName**=false||'relative' - instead of fullpath file names, just get the names or relative item names\r\n    - **recursive**=true - traverse through all children of given path\r\n    - **excludeHidden** - hidden files will be ignored (files starting with a dot are ignored)\r\n\r\n### promiseFiles API\r\n\r\n```javascript\r\npromiseFiles(dir, type||options, options)\r\n```\r\n\r\n- **dir** - directory path to read\r\n- **type**='file'\r\n    - 'file' returns only file listings\r\n    - 'dir' returns only directory listings\r\n    - 'all' returns {dirs:[], files:[]}\r\n    - 'combine' returns []\r\n- **options**\r\n    - **sync**=false - DO NOT USE for promiseFiles, will cause unexpected behavior\r\n    - **shortName**=false||'relative' - instead of fullpath file names, just get the names or relative item names\r\n    - **recursive**=true - traverse through all children of given path\r\n\r\n## License\r\nMIT licensed (See LICENSE.txt)\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/fshost/node-dir.git"
  },
  "scripts": {
    "test": "mocha --reporter spec"
  },
  "version": "0.1.19"
}
